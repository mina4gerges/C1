apply plugin: 'java'

version = '1.0'
ext {
  tp_number = '02'
}

repositories {
	mavenCentral()
}

dependencies {
    testImplementation 'junit:junit:4.12'
}

task runApp(type: JavaExec, dependsOn: compileJava) {
  group = 'application'
  description = 'Runs MenuCustomer as JVM application.'
  classpath = sourceSets.main.runtimeClasspath
  main = "com.yaps.petstore.ui.MenuCustomer"
  standardInput = System.in 
}

task jarClientCatalog(type: Jar, dependsOn: compileJava) {
  manifest {
        attributes 'Implementation-Title': 'Gradle generated Jar File for Client Catalog',  
        	'Implementation-Version': version,
        	'Main-Class': 'com.yaps.petstore.ui.MenuCatalog'
    }
  baseName = 'clientCatalog'
  destinationDir = file("${buildDir}/libs")
  from file("${buildDir}/classes/java/main") // deprecated sourceSets.main.output.classesDir
  include '**/domain/**/*'
  exclude '**/domain/Customer.class'
  include '**/exception/**/*'
  include '**/persistence/**/*'
  exclude '**/persistence/CustomerDAO.class'
  include 'com/yaps/petstore/ui/MenuCatalog.class'
}
task runJarClientCatalog(type: JavaExec, dependsOn: jarClientCatalog) {
  group = 'application'
  description = 'Runs the MenuCatalog as JVM application.'
  classpath file("${buildDir}/libs/clientCatalog-" + version + ".jar")
  main = "com.yaps.petstore.ui.MenuCatalog"
  standardInput = System.in 
}

task jarClientCustomer(type: Jar, dependsOn: compileJava) {
  manifest {
        attributes 'Implementation-Title': 'Gradle generated Jar File for Client Customer',  
        	'Implementation-Version': version,
        	'Main-Class': 'com.yaps.petstore.ui.MenuCustomer'
    }
  baseName = 'clientCustomer'
  destinationDir = file("${buildDir}/libs")
  from file("${buildDir}/classes/java/main")
  include '**/domain/Customer.class'
  include '**/exception/**/*'
  include '**/persistence/DataAccessObject.class'
  include '**/persistence/CustomerDAO.class'
  include 'com/yaps/petstore/ui/MenuCustomer.class'
}

// jar dependsOn: jarClientCatalog, jarClientCustomer{ }
jar.doLast (){
  // NO! jarClientCatalog.doFirst;
  println "***INFO*** TODO clientCustomer.jar not created! "
}

task deploy {
  group = 'distribution'
  description = 'Install the project as a distribution.'
  dependsOn jarClientCatalog, jarClientCustomer
}
 
task zip_src {
  ant.zip(destfile: "TP${tp_number}src.zip") {
    fileset(dir: '.') {
      includesfile(name: 'missingFiles.txt')
    }
  }
}
zip_src.doLast {
  println "***INFO***  zip_src done! "
}

clean.doLast {
      // delete also files generated by mark task
      file("${rootDir}/TP${tp_number}.test").delete()
      file("${rootDir}/TP${tp_number}.html").delete()
      file("${rootDir}/TP${tp_number}src.zip").delete()
}

task mark(type: JavaExec){
  group = 'verification'
  description = 'Runs other unit tests and Generates TP result.'
  dependsOn compileJava
  dependsOn zip_src
  main = "Tests"
  systemProperty "fichierScenario", "TP${tp_number}.test"
  classpath files([ "${buildDir}/classes/java/main", "install/test${tp_number}.jar" ])
  classpath sourceSets.test.runtimeClasspath // to find JUnit jar
  classpath sourceSets.main.runtimeClasspath
}

task myTest(type: JavaExec){
  dependsOn compileJava
  dependsOn compileTestJava
  group = 'verification'
  description = 'Runs the unit tests in text mode.'
  main = "AllTests"
  classpath files([ "${buildDir}/classes/java/test" ]) // yaps test classes 
  classpath sourceSets.test.runtimeClasspath // to find JUnit jar
  classpath sourceSets.main.runtimeClasspath
}

test {
    // configure the test task to output the test methods we can see that which tests are executed
    beforeTest { descriptor ->
       logger.lifecycle("Running test: $descriptor")
    }
}
// To test only one (package or) class : gradle cleanTest; gradle test --tests "com.yaps.petstore.domain.CustomerTest"
